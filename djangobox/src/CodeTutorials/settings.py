"""
Django settings for CodeTutorials project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from djangocodemirror.settings import *			#djangocodemirror widget


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# Use a separate file for the secret key
with open(os.path.join(BASE_DIR, 'secretkey.txt'), 'r') as f:
	SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if DEBUG == True:
	UNITTEST = True # Currently, 'UNITTEST' has the same value as 'DEBUG', but you can change it to False while debugging if you want
	ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]']
else:
	UNITTEST = False
	ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]'] # Change these hostnames for your production environment


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Project specific

    'spikes',
    'editor',
    'docker',
    'client',
    'resources',
    'tutorials',
    'djangocodemirror',
    'django_generate_secret_key',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'CodeTutorials.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
        	os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CodeTutorials.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# The following is where 'collectstatic' puts files for the server to serve

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')


# Docker container creation & runtime options

CONT_TMP_PATH = os.path.join('/tmp', 'CodeTutorials') # Where the relevant files for a container are stored
CONT_OPTS = { # Command line arguments used with docker invocation
	# Argument		Value			Unit
	'--cpus=':		1,			# Percentage of CPU time (4 CPU's -> 400% = 4 total)
	'--memory=':		64 * 2 ** 20,		# Bytes
	'--kernel-memory=':	64 * 2 ** 20,		# Bytes
	'--shm-size=':		64 * 2 ** 20,		# Bytes
	'--pids-limit=':	32,			# PID's
	'--network=':		'none',			# Enumeration
	'--security-opt ':	'no-new-privileges',	# Enumeration
	'--ipc=':		'private',		# Enumeration
}

# Change these to '-1' to allow unlimited write and read size to/from the input/output files
# Variable		Value		Unit
CONT_MAXINPUT	=	4 * 2 ** 10	# Bytes
CONT_MAXOUTPUT	=	4 * 2 ** 10	# Bytes

# Container timeout values
CONT_RUNOPTS	= ' '.join(map(lambda opt: str(opt) + str(CONT_OPTS[opt]), CONT_OPTS)) # Don't mess with this
CONT_GRACE	= 10	# Time until container should be stopped
CONT_TIMEOUT	= 0	# Time given after grace period

os.environ['CONT_RUNOPTS']	= str(CONT_RUNOPTS)
os.environ['CONT_GRACE']	= str(CONT_GRACE)
os.environ['CONT_TIMEOUT']	= str(CONT_TIMEOUT)
